#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import re
from tqdm.auto import tqdm
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.chat_models import ChatOllama


# Ensure required columns exist
required_cols = {"PMID", "Title", "Abstract", "Authors", "Publication_Date"}
missing_cols = required_cols - set(df.columns)
if missing_cols:
    raise ValueError(f"❌ Missing columns in input file: {', '.join(missing_cols)}")

# --- 2. Get Therapeutic Indication from User ---
indication = input("Enter the therapeutic indication to evaluate against the abstracts: ").strip().lower()

# --- 3. Define Prompt 1: Benefit Evaluation ---
benefit_prompt = ChatPromptTemplate.from_messages([
    ("system", """You are a pharmacovigilance expert preparing the “Characterisation of Benefits” section for a PSUR.

Evaluate the abstract based on:
1. Strength of evidence (comparators, effect size, statistics, methodology)
2. Clinical relevance of the effect size
3. Generalisability of the results to wider populations
4. Presence of a dose–response relationship
5. Duration and consistency of observed effects
6. Comparative efficacy with existing therapies

Then respond in the following format:
Relevance: Relevant or Not Relevant  
Reason: <Short reason>"""),
    ("user", "{Abstract}")
])

# --- 4. Define Prompt 2: Indication Matching ---
indication_prompt = ChatPromptTemplate.from_messages([
    ("system", """You are evaluating whether the given abstract supports the therapeutic indication: "{indication}".

Check if the abstract explicitly or implicitly provides evidence related to this indication, regardless of strength.

Respond only in the following format:
Indication Match: Yes or No  
Indication Reason: <Short reason>"""),
    ("user", "{Abstract}")
])

# --- 5. Initialize Local LLM ---
llm = ChatOllama(model="gemma3", temperature=0.1, num_ctx=1000)
benefit_chain = benefit_prompt | llm
indication_chain = indication_prompt.partial(indication=indication) | llm

# --- 6. Evaluation Loop ---
rel_benefit_list = []
res_benefit_list = []
ind_match_list = []
ind_reason_list = []

for _, row in tqdm(df.iterrows(), total=len(df), desc="Evaluating abstracts"):
    abstract = row.get("Abstract", "")
    if not isinstance(abstract, str) or not abstract.strip():
        rel_benefit_list.append("Not Available")
        res_benefit_list.append("Abstract is empty or missing")
        ind_match_list.append("Not Available")
        ind_reason_list.append("Abstract is empty or missing")
        continue

    # --- Benefit Evaluation ---
    benefit_resp = benefit_chain.invoke({"Abstract": abstract})
    benefit_text = benefit_resp.content if hasattr(benefit_resp, "content") else str(benefit_resp)

    match_rel = re.search(r"Relevance:\s*(Relevant|Not Relevant)", benefit_text, re.IGNORECASE)
    match_reason = re.search(r"Reason:\s*(.+)", benefit_text, re.IGNORECASE)

    relevance = match_rel.group(1).strip() if match_rel else "Unclear"
    reason = match_reason.group(1).strip() if match_reason else "Could not extract reason"

    rel_benefit_list.append(relevance)
    res_benefit_list.append(reason)

    # --- Indication Matching ---
    indication_resp = indication_chain.invoke({"Abstract": abstract})
    indication_text = indication_resp.content if hasattr(indication_resp, "content") else str(indication_resp)

    match_ind = re.search(r"Indication Match:\s*(Yes|No)", indication_text, re.IGNORECASE)
    match_ind_reason = re.search(r"Indication Reason:\s*(.+)", indication_text, re.IGNORECASE)

    ind_match = match_ind.group(1).strip() if match_ind else "Unclear"
    ind_reason = match_ind_reason.group(1).strip() if match_ind_reason else "Could not extract indication reason"

    ind_match_list.append(ind_match)
    ind_reason_list.append(ind_reason)

# --- 7. Assign Results to DataFrame ---
df["Relavance_benifit"] = rel_benefit_list
df["Reson_Benifit"] = res_benefit_list
df["Indication Match"] = ind_match_list
df["Indication Reason"] = ind_reason_list

# --- 8. Select Final Columns and Export ---
final_columns = [
    "PMID",
    "Title",
    "Abstract",
    "Authors",
    "Publication_Date",
    "Relavance_benifit",
    "Reson_Benifit",
    "Indication Match",
    "Indication Reason"
]
df_final = df[final_columns]

output_path = "psur_evaluation_output.csv"
df_final.to_csv(output_path, index=False)
print(f"✅ Evaluation complete. Output saved to '{output_path}'")
